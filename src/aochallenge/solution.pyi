from .input import load as load, variant as variant
from typing import Any, Generator

class Solution:
    basename: str
    def __init__(self) -> None: ...
    def load(self, splitlines: bool = ..., splitrecords: Union[str, None] = ..., recordtype: Union[list[type], tuple[type, ...], type, None] = ..., *, lut: Union[dict[Union[str, None], Any], None] = ...) -> Union[list[Union[str, int, list[Union[str, int]]]], Any]: ...
    def variant(self) -> Union[str, None]: ...
    def solve_more(self) -> Generator[Union[int, str], None, None]: ...
    def print_condensed(self, data: list[list[Union[int, str]]]) -> None: ...
    def print_csv(self, data: list[list[Union[int, str]]]) -> None: ...
    def print_arranged(self, data: list[list[Union[int, str]]]) -> None: ...
    def main(self) -> None: ...
